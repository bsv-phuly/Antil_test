// @ts-nocheck
// eslint-disable
// ---------------------------------------------------
// ðŸš—ðŸš¦ Generated by nuxt-typed-router. Do not modify !
// ---------------------------------------------------

export type RoutePathSchema = '/' | '/login';

type ValidStringPath<T> = T extends `${string} ${string}` ? false : T extends '' ? false : true;

type ValidParam<T, R extends boolean = true> = T extends `${infer A}/${infer B}`
  ? A extends `${string} ${string}`
    ? false
    : A extends `?${string}`
      ? false
      : A extends `${string} ${string}`
        ? false
        : A extends ''
          ? B extends ''
            ? true
            : false
          : B extends `?${string}`
            ? false
            : B extends `#${string}`
              ? true
              : B extends ''
                ? true
                : false
  : R extends true
    ? T extends ''
      ? false
      : ValidParam<T, false>
    : T extends `?${string}`
      ? false
      : T extends `${string} ${string}`
        ? false
        : true;

type ValidEndOfPath<T> = T extends `/`
  ? true
  : T extends ''
    ? true
    : T extends `${string} ${string}`
      ? false
      : T extends `?${string}`
        ? true
        : T extends `#${string}`
          ? true
          : false;

type ValidateLogin<T> = T extends `/login${infer TLogin}`
  ? ValidEndOfPath<TLogin> extends false
    ? "End of path '/login' is invalid"
    : true
  : false;

export type ValidatePath<T extends string> = T extends string
  ? T extends '/'
    ? T
    : ValidateLogin<T> extends true
      ? T
      : string extends T
        ? T
        : `Error: ${ValidateLogin<T>}`
  : never;

// RouteNameFromPath, RouteNameFromLocalePath
export type RouteNameFromPath<T extends string> = T extends string
  ? T extends '/'
    ? 'index'
    : ValidateLogin<T> extends true
      ? 'login'
      : never
  : never;

export type TypedPathParameter<T extends string> = ValidatePath<T> | RoutePathSchema;
